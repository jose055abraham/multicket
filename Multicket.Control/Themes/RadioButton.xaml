<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
                    xmlns:component="clr-namespace:Multicket.Module.Components"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/Control;component/Themes/Colors.xaml" />
        <!--<ResourceDictionary Source="pack://application:,,,/Control;component/Themes/Icons.xaml" />-->
    </ResourceDictionary.MergedDictionaries>

    <!--  Focus Visual  -->
    <Style x:Key="ButtonFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle
                            Margin="0"
                            Stroke="#60000000"
                            StrokeDashArray="0 0"
                            StrokeThickness="0" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--  Button Style  -->
    <Style x:Key="Agile" TargetType="{x:Type RadioButton}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}" />
        <Setter Property="Foreground" Value="{StaticResource TextForegroundBrush}" />
        <Setter Property="Background" Value="{StaticResource NormasBrushBackground}" />
        <!--  NormalBrush  -->
        <Setter Property="BorderBrush" Value="{StaticResource LightBorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Padding" Value="2" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template" >
            <Setter.Value>
                <ControlTemplate  TargetType="{x:Type RadioButton}">
                    <Border
                        x:Name="BorderA"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="2">       

                        <Border
                            x:Name="BorderB"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="2">

                            <ContentPresenter
                                Margin="{TemplateBinding Padding}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />

                        </Border>

                    </Border>


                    <ControlTemplate.Triggers>
                        <!--<Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter TargetName="BorderA" Property="BorderBrush" Value="{StaticResource DefaultedBorderBrush}" />
                        </Trigger>-->
                        <!--<Trigger Property="IsChecked" Value="False">
                            <Setter TargetName="BorderB" Property="BorderBrush" Value="{StaticResource LightBorderBrush}" />
                            <Setter TargetName="BorderA" Property="BorderBrush" Value="Transparent" />
                            <Setter TargetName="BorderA" Property="BorderThickness" Value="1" />
                            <Setter TargetName="BorderB" Property="BorderThickness" Value="1" />
                        </Trigger>-->
                        <Trigger Property="IsChecked" Value="false">
                                <Setter TargetName="BorderB" Property="BorderBrush" Value="{StaticResource LightBorderBrush}" />
                                <Setter TargetName="BorderA" Property="BorderBrush" Value="Transparent" />
                                <Setter TargetName="BorderA" Property="BorderThickness" Value="1" />
                                <Setter TargetName="BorderB" Property="BorderThickness" Value="1" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="BorderA" Property="Background" Value="{StaticResource NormasBrushBackground}" />
                            <Setter TargetName="BorderA" Property="BorderBrush" Value="#BAB9BB" />
                            <Setter TargetName="BorderB" Property="BorderBrush" Value="#D8D6D3" />

                        </Trigger>
                        <!--<Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="BorderA" Property="Background" Value="{StaticResource PressedBrush}" />
                            <Setter TargetName="BorderA" Property="BorderBrush" Value="{StaticResource LightBorderBrush}" />
                        </Trigger>-->
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="BorderA" Property="Background" Value="{StaticResource DisabledBackgroundBrush}" />
                            <Setter TargetName="BorderB" Property="BorderBrush" Value="Transparent" />
                            <!--D8D6D3-->
                            <Setter TargetName="BorderA" Property="BorderBrush" Value="{StaticResource DisabledBorderBrush}" />
                            <Setter TargetName="BorderA" Property="BorderThickness" Value="1" />
                            <Setter TargetName="BorderB" Property="BorderThickness" Value="1" />
                            <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}" />
                            <!--Indigo-->
                        </Trigger>
                    </ControlTemplate.Triggers>
              
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Effect">
            <Setter.Value>
                <DropShadowEffect
                    BlurRadius="2"
                    Opacity="0.1"
                    ShadowDepth="0"
                    Color="LightGray" />
            </Setter.Value>
        </Setter>
    </Style>
    
</ResourceDictionary>